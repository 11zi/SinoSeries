import com.google.common.io.FileWriteMode
import com.google.common.io.Files

import java.nio.charset.StandardCharsets

plugins {
    id 'architectury-plugin' version "${architect_plugin_version}"
    id 'dev.architectury.loom' version "${architectury_loom_version}"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    runs {
        client {
            configName = 'NeoForge Client'
            runDir = 'run/client'
        }

        server {
            configName = 'NeoForge Server'
            runDir = 'run/server'
        }
    }

    mods {
        subMod.each { Project mod ->
            helpers.getSubNeoForgeMod(mod).each { Project neoForgeMod ->
                "${mod.modid}" {
                    sourceSet neoForgeMod.sourceSets.main
                }
            }
        }
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${project.neoforge_version}"

    subMod.each { Project mod ->
        helpers.getSubNeoForgeMod(mod).each { Project neoForgeMod ->
            include project(path: neoForgeMod.path, configuration: 'namedElements')
        }
    }
}

classes {
    subMod.each { Project mod ->
        helpers.getSubNeoForgeMod(mod).each { Project neoForgeMod ->
            dependsOn("${mod.path}:classes")
            dependsOn("${neoForgeMod.path}:classes")
        }
    }
}

processResources {
    var projectTransformsFile = new File(projectDir, '/.gradle/architectury/.transforms')
    java.nio.file.Files.deleteIfExists(projectTransformsFile.toPath())
    java.nio.file.Files.createFile(projectTransformsFile.toPath())

    subMod.each { Project mod ->
        helpers.getSubNeoForgeMod(mod).each { Project neoForgeMod ->
            var subModTransformsFile = new File(neoForgeMod.projectDir, '/.gradle/architectury/.transforms')
            var lines = java.nio.file.Files.readString(subModTransformsFile.toPath())
            Files.asCharSink(projectTransformsFile, StandardCharsets.UTF_8, FileWriteMode.APPEND)
                    .write(lines)
        }
    }

    println 'Architectury transformers injected.'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            version = helpers.getMavenVersion(project)
            from components.java
        }
    }
}
