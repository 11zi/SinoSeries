plugins {
    id 'architectury-plugin' version "${architect_plugin_version}"
    id 'dev.architectury.loom' version "${architectury_loom_version}"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    runs {
        client {
            configName = 'Fabric Client'
            runDir = 'run/client'
        }

        server {
            configName = 'Fabric Server'
            runDir = 'run/server'
        }
    }

    mods {
        subMod.each { Project mod ->
            helpers.getSubFabricMod(mod).each { Project fabricMod ->
                "${mod.modid}" {
                    sourceSet fabricMod.sourceSets.main
                }
            }
        }
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }

    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    modRuntimeOnly group: 'maven.modrinth', name: 'modmenu', version: project.mod_menu_fabric_version
    modRuntimeOnly group: 'me.shedaniel', name: 'RoughlyEnoughItems-fabric', version: project.mod_rei_fabric_version

    subMod.each { Project mod ->
        common(project(path: mod.path, configuration: 'namedElements')) { transitive false }

        helpers.getSubFabricMod(mod).each { Project fabricMod ->
            implementation project(path: fabricMod.path, configuration: 'namedElements')

            if (mod.modid != 'sinotest') {
                include project(path: fabricMod.path, configuration: 'namedElements')
            }
        }
    }
}

processResources {
    Map<String, ?> propertiesToExpend = helpers.getPropertiesToExpand(project, true)
    List<String> filesToMatch = helpers.getFilesToMatchExpand()

    filesMatching(filesToMatch, (copy) -> {
        expand(propertiesToExpend)
    })
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            version = helpers.getMavenVersion(project)
            from components.java
        }
    }
}
