import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.StandardOpenOption

void injectForgeTransformers(Project project) {
    var file = initTransformers(project)

    subMod.each { Project mod ->
        helpers.getSubForgeMod(mod).each { Project forgeMod ->
            appendTransformers(file, forgeMod)
        }
    }

    println 'Architectury transformers injected.'
}

void injectNeoForgeTransformers(Project project) {
    var file = initTransformers(project)

    subMod.each { Project mod ->
        helpers.getSubNeoForgeMod(mod).each { Project neoForgeMod ->
            appendTransformers(file, neoForgeMod)
        }
    }

    println 'Architectury transformers injected.'
}

File initTransformers(Project project) {
    var projectTransformsDir = new File(project.projectDir, '/.gradle/architectury')

    if (projectTransformsDir.exists()) {
        projectTransformsDir.mkdirs()
    }

    var projectTransformsFile = new File(projectTransformsDir, '.transforms')

    Files.deleteIfExists(projectTransformsFile.toPath())
    Files.createFile(projectTransformsFile.toPath())

    return projectTransformsFile
}

void appendTransformers(File file, Project project) {

    var projectTransformsDir = new File(project.projectDir, '/.gradle/architectury')

    if (projectTransformsDir.exists()) {
        projectTransformsDir.mkdirs()
    }

    var projectTransformsFile = new File(projectTransformsDir, '.transforms')

    if (!projectTransformsFile.exists()) {
        Files.createFile(projectTransformsFile.toPath())
    }

    var lines = Files.readString(projectTransformsFile.toPath())
    Files.write(file.toPath(), lines.getBytes(StandardCharsets.UTF_8), StandardOpenOption.APPEND)
}

ext.metaHelpers = {
    injectForgeTransformers = this.&injectForgeTransformers
    injectNeoForgeTransformers = this.&injectNeoForgeTransformers
}
