import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.StandardOpenOption

void injectForgeTransformers(Project project) {
    var file = initTransformers(project)

    logger.lifecycle('Injecting architectury transformers.')
    if (file != null) {
        subMod.each { Project mod ->
            helpers.getSubForgeMod(mod).each { Project forgeMod ->
                appendTransformers(file, forgeMod)
            }
        }

        logger.info('Architectury transformers injected.')
    } else {
        throw new RuntimeException('Transformers of project forge-meta can not be injected!')
    }
}

void injectFabricTransformers(Project project) {
    var file = initTransformers(project)

    logger.lifecycle('Injecting architectury transformers.')
    if (file != null) {
        subMod.each { Project mod ->
            helpers.getSubForgeMod(mod).each { Project forgeMod ->
                appendTransformersFabric(file, forgeMod)  // qyl27: Yes, copy from forge mod.
            }
        }

        logger.info('Architectury transformers injected.')
    } else {
        throw new RuntimeException('Transformers of project fabric-meta can not be injected!')
    }
}

void injectNeoForgeTransformers(Project project) {
    var file = initTransformers(project)

    logger.lifecycle('Injecting architectury transformers.')
    if (file != null) {
        subMod.each { Project mod ->
            helpers.getSubForgeMod(mod).each { Project forgeMod ->
                appendTransformers(file, forgeMod)  // qyl27: Yes, copy from forge mod.
            }
        }

        logger.info('Architectury transformers injected.')
    } else {
        throw new RuntimeException('Transformers of project neoforge-meta can not be injected!')
    }
}

File initTransformers(Project project) {
    var projectTransformsDir = new File(project.projectDir, '/.gradle/architectury')

    if (projectTransformsDir.exists()) {
        var projectTransformsFile = new File(projectTransformsDir, '.transforms')

        Files.deleteIfExists(projectTransformsFile.toPath())
        Files.createFile(projectTransformsFile.toPath())

        return projectTransformsFile
    }

    logger.lifecycle('Directory projectDir/.gradle/architectury is not exists!')
    return null
}

void appendTransformers(File file, Project project) {
    var projectTransformsFile = new File(project.projectDir, '/.gradle/architectury/.transforms')
    if (!projectTransformsFile.exists()) {
        logger.lifecycle("Transformer of project ${project.name} is not exists!")
        return
    }

    var text = Files.readString(projectTransformsFile.toPath())
    appendText(file, text)
}

void appendTransformersFabric(File file, Project project) {
    var projectTransformsFile = new File(project.projectDir, '/.gradle/architectury/.transforms')
    if (!projectTransformsFile.exists()) {
        logger.lifecycle("Transformer of project ${project.name} is not exists!")
        return
    }

    var text = Files.readString(projectTransformsFile.toPath())

    var lines = text.split(';')
    for (def line : lines) {
        if (line.contains('Forge')) {
            continue
        }

        appendText(file, "${line};")
    }

    if (lines.length >= 1) {
        var line = lines[0].split('\\|')
        appendText(file, "${line[0]}|dev.architectury.transformer.transformers.GenerateFakeFabricMod;")
    }
}

void appendText(File file, String string) {
    if (file.exists()) {
        Files.write(file.toPath(), string.getBytes(StandardCharsets.UTF_8), StandardOpenOption.APPEND)
    }
}

ext.metaHelpers = {
    injectForgeTransformers = this.&injectForgeTransformers
    injectFabricTransformers = this.&injectFabricTransformers
    injectNeoForgeTransformers = this.&injectNeoForgeTransformers
}
