plugins {
    id 'maven-publish'
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'dev.architectury.loom' version '1.1-SNAPSHOT'
}

println "Java: ${System.getProperty 'java.version'}, " +
        "JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), " +
        "Arch: ${System.getProperty 'os.arch'}"

repositories {
}

dependencies {
    implementation project(path: ':SinoCore', configuration: 'namedElements')
    implementation project(path: ':SinoFoundation', configuration: 'namedElements')
    implementation project(path: ':SinoFeast', configuration: 'namedElements')
    implementation project(path: ':SinoDivination', configuration: 'namedElements')
    implementation project(path: ':SinoCalligraphy', configuration: 'namedElements')
}

// XXX: qyl27: this is a temp resolution for architectury/architectury-loom#120. remember to change it in future.
loom {

    forge {
        mixinConfig new File(project(':SinoCore').projectDir, 'src/main/resources/sinocore.mixins.json').toString()
    }

    var modClasses = ''
    subprojects.forEach {
        modClasses += "${it.name}%%${projectDir}\\${it.name}\\build\\resources\\main;${it.name}%%${projectDir}\\${it.name}\\build\\classes\\java\\main;"
    }

    runs {
        client {
            client()

            environmentVariable 'MOD_CLASSES', modClasses
        }

        server {
            server()

            environmentVariable 'MOD_CLASSES', modClasses
        }

        data {
            data()

            environmentVariable 'MOD_CLASSES', modClasses
        }
    }
}

allprojects {
    apply plugin: 'architectury-plugin'
    apply plugin: 'dev.architectury.loom'

    group 'games.moegirl.sinocraft'
    version "${project.minecraft_version}-${project.sinoseries_version}"

    if (System.getenv('JITPACK') == 'true') {
        version += "-${System.getenv('VERSION')}"
    }

    var release = false
    if (release || (System.getenv('SINOSERIES_RELEASE') == 'true')) {
        version += '-release'
    } else {
        version += '-dev'
    }

    architectury {
        platformSetupLoomIde()
        forge()
    }

    loom {
        silentMojangMappingsLicense()

        forge {
        }
    }

    repositories {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }

        maven {
            name = 'Jitpack'
            url = 'https://jitpack.io'
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip")
        }
    }

    configurations.configureEach {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'

    println "Mod ${project.mod_name} of ${rootProject.name}, ver ${project.version}."

    java {
        toolchain.languageVersion = JavaLanguageVersion.of(17)

        withSourcesJar()
    }

    sourceSets.main.resources {
        srcDir 'src/generated/resources'
    }

    processResources {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        expand(project.properties)
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    jar {
        manifest {
            attributes([
                    "Specification-Title"     : project.mod_name,
                    "Specification-Vendor"    : project.sinoseries_authors,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.mod_name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : project.sinoseries_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.modid
            from components.java
        }
    }

    repositories {
        mavenLocal()

        flatDir {
            dir 'publish'
        }
    }
}
