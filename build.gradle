plugins {
    id 'architectury-plugin' version "${architect_plugin_version}" apply false
    id 'dev.architectury.loom' version "${architectury_loom_version}" apply false
    id 'com.github.johnrengelman.shadow' version "${shadow_plugin_version}" apply false
    id 'org.ajoberstar.grgit' version "${grgit_plugin_version}"
    id 'me.shedaniel.unified-publishing' version "${unified_publishing_plugin_version}" apply false
}

apply from: 'gradle/scripts/helper.gradle'

def ENV = System.getenv()

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'architectury-plugin'
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'me.shedaniel.unified-publishing'

    group = 'games.moegirl.sinocraft'
    version = project.sinoseries_version

    architectury {
        minecraft = rootProject.minecraft_version
    }

    loom {
        silentMojangMappingsLicense()
        setEnableTransitiveAccessWideners true
        setEnableModProvidedJavadoc true
    }

    repositories {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }

        maven {
            name = 'NeoForge'
            url = 'https://maven.neoforged.net/releases/'
        }

        maven {
            name = 'Shedaniel'
            url = 'https://maven.shedaniel.me'
        }

        exclusiveContent {
            forRepository {
                maven {
                    name = "Modrinth"
                    url = "https://api.modrinth.com/maven"
                }
            }

            filter {
                includeGroup "maven.modrinth"
            }
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"

        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${project.parchment_minecraft_version}:${project.parchment_version}@zip")
        }
    }

    java {
        withSourcesJar()
    }

    sourcesJar {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    sourceSets.main.resources {
        srcDir 'src/main/resources'
        srcDir 'src/generated/resources'
    }

    processResources {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        exclude('mod_desc.txt')
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = 17
    }

    publishing {
        repositories {
            mavenLocal()

            maven {
                name = 'YuluoMaven'

                def releaseUrl = 'https://maven.yuluo.dev/repository/maven-releases/'
                def snapshotUrl = 'https://maven.yuluo.dev/repository/maven-snapshots/'
                url = ENV.SINOSERIES_RELEASE ? releaseUrl : snapshotUrl

                credentials {
                    username System.getenv('SINOSERIES_MAVEN_USER')
                    password System.getenv('SINOSERIES_MAVEN_PASS')
                }
            }
        }
    }

    // Fixme: qyl27: Due to an unknown issue that forge-like projects can't clean the output resources dir.
    compileJava.dependsOn(clean)
}

subMod.each { Project mod ->
    Map<String, ?> propertiesToExpend = helpers.getPropertiesToExpand(mod)
    Map<String, ?> propertiesToExpendFabric = helpers.getPropertiesToExpand(mod, true)
    List<String> filesToMatch = helpers.getFilesToMatchExpand()

    configure(mod) {
        version = project.sinoseries_version

        architectury {
            common(((String) mod.mod_platforms).split(','))
        }

        loom {
            var aw = new File(mod.projectDir, "src/main/resources/${mod.modid}.accesswidener")
            if (aw.exists()) {
                accessWidenerPath = aw
            }

            var commonFile = new File(mod.projectDir, 'src/main/resources/architectury.common.json')
            if (commonFile.exists()) {
                interfaceInjection {
                    enableDependencyInterfaceInjection = true
                }
            }
        }

        dependencies {
            // qyl27: Use fabric-loader in order to use EnvType class.
            modImplementation "net.fabricmc:fabric-loader:${mod.fabric_loader_version}"

            if (!mod.name.startsWith('sinocore')) {
                api project(path: ':sinocore', configuration: 'namedElements')
            }

            compileOnly group: 'org.spongepowered', name: 'mixin', version: '0.8.5'
        }

        processResources {
            filesMatching(filesToMatch, (copy) -> {
                expand(propertiesToExpend)
            })
        }
    }

    configure(mod.subprojects) { Project sub ->
        apply plugin: 'com.github.johnrengelman.shadow'

        version = project.sinoseries_version

        loom {
            interfaceInjection {
                enableDependencyInterfaceInjection = true
            }
        }

        configurations {
            common {
                canBeResolved = true
                canBeConsumed = false
            }

            compileClasspath.extendsFrom common
            runtimeClasspath.extendsFrom common
            developmentFabric.extendsFrom common

            shadowBundle {
                canBeResolved = true
                canBeConsumed = false
            }
        }

        shadowJar {
            exclude 'architectury.common.json'

            configurations = [project.configurations.shadowBundle]
            archiveClassifier = 'dev-shadow'
        }

        remapJar {
            input.set shadowJar.archiveFile
            dependsOn shadowJar
        }

        sourcesJar {
            var commonSources = mod.sourcesJar
            dependsOn commonSources
            from commonSources.archiveFile.map { zipTree(it) }
        }

        components.java {
            withVariantsFromConfiguration(sub.configurations.shadowRuntimeElements) {
                skip()
            }
        }

        dependencies {
            if (!mod.name.startsWith('sinocore')) {
                api project(path: ':sinocore', configuration: 'namedElements')
            }
        }

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    version = helpers.getMavenVersion(sub)
                    from components.java
                }
            }
        }
    }

    configure(helpers.getSubForgeMod(mod)) { Project forgeMod ->
        apply plugin: 'com.github.johnrengelman.shadow'

        architectury {
            platformSetupLoomIde()
            forge()
        }

        loom {
            forge {
                var aw = new File(forgeMod.projectDir, "src/main/resources/${mod.modid}-forge.accesswidener")
                if (aw.exists()) {
                    accessWidenerPath = aw
                }

                if (loom.accessWidenerPath.isPresent()) {
                    convertAccessWideners = true
                    extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
                }

                var commonMixin = mod.file("/src/main/resources/${mod.modid}-common.mixins.json")
                var forgeMixin = forgeMod.file("/src/main/resources/${mod.modid}-forge.mixins.json")

                if (commonMixin.exists()) {
                    mixinConfig "${mod.modid}-common.mixins.json"
                }

                if (forgeMixin.exists()) {
                    mixinConfig "${mod.modid}-forge.mixins.json"
                }
            }

            runConfigs.configureEach { config ->
                ideConfigGenerated = false
            }
        }

        sourceSets.main.resources {
            srcDir(new File(mod.projectDir, 'src/main/resources'))
            srcDir(new File(mod.projectDir, 'src/generated/resources'))
        }

        dependencies {
            forge "net.minecraftforge:forge:${mod.minecraft_version}-${forgeMod.forge_version}"

            common(project(path: mod.path, configuration: 'namedElements')) { transitive = false }
            shadowBundle project(path: mod.path, configuration: 'transformProductionForge')
        }

        processResources {
            filesMatching(filesToMatch, (copy) -> {
                expand(propertiesToExpend)
            })
        }
    }

    configure(helpers.getSubFabricMod(mod)) { Project fabricMod ->
        apply plugin: 'com.github.johnrengelman.shadow'

        architectury {
            platformSetupLoomIde()
            fabric()
        }

        loom {
            accessWidenerPath = mod.loom.accessWidenerPath

            runConfigs.configureEach { config ->
                ideConfigGenerated = false
            }
        }

        dependencies {
            modImplementation "net.fabricmc:fabric-loader:${fabricMod.fabric_loader_version}"
            modApi "net.fabricmc.fabric-api:fabric-api:${fabricMod.fabric_api_version}"

            common(project(path: mod.path, configuration: 'namedElements')) { transitive = false }
            shadowBundle project(path: mod.path, configuration: 'transformProductionFabric')
        }

        processResources {
            filesMatching(filesToMatch, (copy) -> {
                expand(propertiesToExpendFabric)
            })
        }
    }
}

loom {
    runConfigs.configureEach { config ->
        ideConfigGenerated = false
    }
}

logger.lifecycle("Building SinoSeries Ver: ${helpers.getMavenVersion(project)}")
helpers.reGenRunConfig()
