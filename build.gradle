plugins {
    id 'maven-publish'
    id 'architectury-plugin' version "${architectury_plugin_version}"
    id 'dev.architectury.loom' version "${architectury_loom_version}"
}

println "Java: ${System.getProperty 'java.version'}, " +
        "JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), " +
        "Arch: ${System.getProperty 'os.arch'}"


dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.parchment_minecraft_version}:${project.parchment_version}@zip")
    }

    implementation project(path: ':SinoCore', configuration: 'namedElements')
    implementation project(path: ':SinoFoundation', configuration: 'namedElements')
    implementation project(path: ':SinoFeast', configuration: 'namedElements')
    implementation project(path: ':SinoDivination', configuration: 'namedElements')
    implementation project(path: ':SinoCalligraphy', configuration: 'namedElements')
    implementation project(path: ':SinoTest', configuration: 'namedElements')

    // Add compile only api to any subproject.
    modRuntimeOnly("curse.maven:jei-${project.jei_project_id}:${project.jei_file_id}")
    modRuntimeOnly("curse.maven:nbtedit-reborn-${project.nbtedit_project_id}:${project.nbtedit_file_id}")
//    modImplementation("com.ptsmods:devlogin:3.1.1")
}

evaluationDependsOn ':SinoCore'
evaluationDependsOn ':SinoFoundation'
evaluationDependsOn ':SinoFeast'
evaluationDependsOn ':SinoDivination'
evaluationDependsOn ':SinoCalligraphy'
evaluationDependsOn ':SinoTest'

loom {
    silentMojangMappingsLicense()

    forge {
        // XXX: qyl27: this is a temp resolution for architectury/architectury-loom#120. remember to change it in future.
        mixinConfig new File(project(':SinoCore').projectDir, 'src/main/resources/sinocore.mixins.json').toString()
        // mixinConfig new File(project(':SinoDivination').projectDir, 'src/main/resources/sinodivination.mixins.json').toString()

        accessTransformer new File(project(':SinoCore').projectDir, 'src/main/resources/META-INF/accesstransformer.cfg')
    }

    mods {
        sinocore {
            sourceSet project(':SinoCore').sourceSets.main
        }

        sinofoundation {
            sourceSet project(':SinoFoundation').sourceSets.main
        }

        sinofeast {
            sourceSet project(':SinoFeast').sourceSets.main
        }

        sinodivination {
            sourceSet project(':SinoDivination').sourceSets.main
        }

        sinocalligraphy {
            sourceSet project(':SinoCalligraphy').sourceSets.main
        }

        sinotest {
            sourceSet project(':SinoTest').sourceSets.main
        }
    }

    runs {
        sinoCoreData {
            data()

            programArgs '--all', '--mod', "sinocore",
                '--output', file('SinoCore/src/generated/resources').absolutePath,
                '--existing', file('SinoCore/src/main/resources').absolutePath
        }

        sinoFoundationData {
            data()

            programArgs '--all', '--mod', "sinofoundation",
                    '--output', file('SinoFoundation/src/generated/resources').absolutePath,
                    '--existing', file('SinoFoundation/src/main/resources').absolutePath
        }

        sinoFeastData {
            data()

            programArgs '--all', '--mod', "sinofeast",
                    '--output', file('SinoFeast/src/generated/resources').absolutePath,
                    '--existing', file('SinoFeast/src/main/resources').absolutePath
        }

        sinoDivinationData {
            data()

            programArgs '--all', '--mod', "sinodivination",
                    '--output', file('SinoDivination/src/generated/resources').absolutePath,
                    '--existing', file('SinoDivination/src/main/resources').absolutePath
        }

        sinoCalligraphyData {
            data()

            programArgs '--all', '--mod', "sinocalligraphy",
                    '--output', file('SinoCalligraphy/src/generated/resources').absolutePath,
                    '--existing', file('SinoCalligraphy/src/main/resources').absolutePath
        }

        sinoTestData {
            data()

            programArgs '--all', '--mod', "sinotest",
                    '--output', file('SinoTest/src/generated/resources').absolutePath,
                    '--existing', file('SinoTest/src/main/resources').absolutePath
        }
    }
}

allprojects {
    group 'games.moegirl.sinocraft'
    version "${project.minecraft_version}-${project.sinoseries_version}"

    if (System.getenv('GITHUB_SHA') != null) {
        version += "-${System.getenv('GITHUB_SHA').substring(0, 7)}"
    } else if (System.getenv('JITPACK') == 'true') {
        version += "-${System.getenv('VERSION')}"
    }

    var release = false
    if (release || (System.getenv('SINOSERIES_RELEASE') == 'true')) {
        version += '-release'
    } else {
        version += '-dev'
    }

    architectury {
        platformSetupLoomIde()
        forge()
    }

    repositories {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }

        maven {
            name = 'Jitpack'
            url = 'https://jitpack.io'
        }

        maven {
            name = 'Curse Maven'
            url = 'https://cursemaven.com'
            content {
                includeGroup 'curse.maven'
            }
        }

//        maven {
//            // location of the maven that hosts JEI files before January 2023
//            name = "Progwml6's maven"
//            url = "https://dvs1.progwml6.com/files/maven/"
//        }
//
//        maven {
//            // location of a maven mirror for JEI files, as a fallback
//            name = "ModMaven"
//            url = "https://modmaven.dev"
//        }
    }
}

subprojects {
    apply plugin: 'dev.architectury.loom'

    apply plugin: 'java'
    apply plugin: 'eclipse'

    println "Mod ${project.mod_name} of ${rootProject.name}, ver ${project.version}."

    java {
//        toolchain.languageVersion = JavaLanguageVersion.of(17)

        withSourcesJar()
    }

    loom {
        silentMojangMappingsLicense()

        forge {}
    }

    sourceSets.main.resources {
        srcDir 'src/generated/resources'
    }

    processResources {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        filesMatching("*/**/*.toml") {
            expand(project.properties)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    jar {
        manifest {
            attributes([
                    "Specification-Title"     : project.mod_name,
                    "Specification-Vendor"    : project.sinoseries_authors,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.mod_name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : project.sinoseries_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

    remapJar {
        destinationDirectory.set(file("${rootProject.projectDir}/output"))
    }

    remapSourcesJar {
        destinationDirectory.set(file("${rootProject.projectDir}/output"))
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.modid
            from components.java
        }
    }

    repositories {
        mavenLocal()

        flatDir {
            dir 'publish'
        }
    }
}
