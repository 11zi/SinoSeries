plugins {
//    id 'java'
    id 'architectury-plugin' version "${architect_plugin_version}"
    id 'dev.architectury.loom' version "${architectury_loom_version}" apply false
    id 'org.ajoberstar.grgit' version "${grgit_plugin_version}"
}

architectury {
    minecraft = project.minecraft_version
}

import java.nio.file.Files
import java.nio.file.Path

reGenRunConfig()

def reGenRunConfig() {
    if (gradle.startParameter.taskRequests.args.any { it.contains('ideaSyncTask') }) {
        Path ideaCache = Path.of("${rootProject.projectDir}/.idea/runConfigurations")
        if (Files.isDirectory(ideaCache)) {
            Files.walk(ideaCache, 1)
                    .filter { Files.isRegularFile(it) }
                    .forEach { Files.delete(it) }

            logger.info('IDEA run configurations successfully cleared.')
        }
    }
}

def getCommit(project) {
    if (grgit == null) {
        return 'nogit'
    }

    def latestCommits = grgit.log(paths: [project.name], maxCommits: 1)

    if (latestCommits.isEmpty()) {
        return 'uncommited'
    }

    return latestCommits.get(0).id.substring(0, 8)
}

def getMavenVersion() {
    def ENV = System.getenv()

    def result = project.sinoseries_version

    if (!ENV.SINOSERIES_RELEASE) {
        result += '-SNAPSHOT'
    } else {
        result += '-RELEASE'
    }

    result += "+mc${project.minecraft_version}"

    if (!ENV.SINOSERIES_RELEASE) {
        result += "-${(ENV.GITHUB_RUN_NUMBER ? '' : 'local-')}${getCommit(project)}"
    }

    return result;
}

def ENV = System.getenv()

allprojects {
    apply plugin: 'maven-publish'

    group = 'games.moegirl.sinocraft'
    version = getMavenVersion()

    repositories {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
    }

    publishing {
        repositories {
            mavenLocal()

            maven {
                name = 'YuluoMaven'

                def releaseUrl = 'https://maven.yuluo.dev/repository/maven-releases/'
                def snapshotUrl = 'https://maven.yuluo.dev/repository/maven-snapshots/'
                url = ENV.SINOSERIES_RELEASE ? releaseUrl : snapshotUrl

                credentials {
                    username System.getenv('SINOSERIES_MAVEN_USER')
                    password System.getenv('SINOSERIES_MAVEN_PASS')
                }
            }
        }

        publications {

        }
    }
}


subprojects {
    apply plugin: 'dev.architectury.loom'

    loom {
        silentMojangMappingsLicense()
    }
}

dependencies {
//    include project(':sino-core')
//    implementation project(path: ':sino-core', configuration: 'namedElements') transitive true
//
//    minecraft "com.mojang:minecraft:${project.minecraft_version}"
//
//    mappings loom.layered() {
//        officialMojangMappings()
//        parchment("org.parchmentmc.data:parchment-${project.parchment_minecraft_version}:${project.parchment_version}@zip")
//    }
}

logger.lifecycle("Building SinoSeries Ver: ${project.version}")
