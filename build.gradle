plugins {
    id 'maven-publish'
    id 'architectury-plugin' version "${architectury_plugin_version}"
    id 'dev.architectury.loom' version "${architectury_loom_version}"
}

println "Java: ${System.getProperty 'java.version'}, " +
        "JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), " +
        "Arch: ${System.getProperty 'os.arch'}"

// 重新加载任务时清理 runConfigurations
import java.nio.file.Files
import java.nio.file.Path

if (gradle.startParameter.taskRequests.args.any { it.contains("ideaSyncTask") }) {
    Path ideaCache = Path.of("${rootProject.projectDir}/.idea/runConfigurations")
    if (Files.isDirectory(ideaCache))
        Files.walk(ideaCache, 1)
                .filter { Files.isRegularFile(it) }
                .forEach { Files.delete(it) }
}

allprojects {
    group 'games.moegirl.sinocraft'
    version "${project.minecraft_version}-${project.sinoseries_version}-SNAPSHOT"

//    if (System.getenv('GITHUB_SHA') != null) {
//        version += "-${System.getenv('GITHUB_SHA').substring(0, 7)}"
//    } else if (System.getenv('JITPACK') == 'true') {
//        version += "-${System.getenv('VERSION')}"
//    }

    var release = false
    if (release || (System.getenv('SINOSERIES_RELEASE') == 'true')) {
        version += '-release'
    }

    architectury {
        platformSetupLoomIde()
        forge()
    }

    repositories {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }

        maven {
            name = 'Jitpack'
            url = 'https://jitpack.io'
        }

        maven {
            name = 'Curse Maven'
            url = 'https://cursemaven.com'
            content {
                includeGroup 'curse.maven'
            }
        }

        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
            content {
                includeGroup "maven.modrinth"
            }
        }

        maven {
            // location of the maven that hosts JEI files since January 2023
            name = "Jared's maven"
            url = "https://maven.blamejared.com/"
        }
        maven {
            // location of a maven mirror for JEI files, as a fallback
            name = "ModMaven"
            url = "https://modmaven.dev"
        }
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}

subprojects {
    apply plugin: 'dev.architectury.loom'

    apply plugin: 'java'
    apply plugin: 'eclipse'

    if (System.getenv('GITHUB_SHA') != null) {
        println "Mod ${project.name} of ${rootProject.name}, ver ${project.version}-${System.getenv('GITHUB_SHA').substring(0, 7)}."
    } else if (System.getenv('JITPACK') == 'true') {
        println "Mod ${project.name} of ${rootProject.name}, ver ${project.version}."
    }

    archivesBaseName = "${project.modid}"

    java {
        withSourcesJar()
    }

    loom {
        silentMojangMappingsLicense()

        forge {}
    }

    sourceSets.main.resources {
        srcDir 'src/generated/resources'
    }

    processResources {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        filesMatching("*/**/*.toml") {
            expand(project.properties)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    jar {
        manifest {
            attributes([
                    "Specification-Title"     : project.mod_name,
                    "Specification-Vendor"    : project.sinoseries_authors,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.mod_name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : project.sinoseries_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${project.parchment_minecraft_version}:${project.parchment_version}@zip")
        }
    }

    remapJar {
        archiveClassifier = null
        destinationDirectory.set(file("${rootProject.projectDir}/output"))
    }

    remapSourcesJar {
        archiveClassifier = 'sources'
        destinationDirectory.set(file("${rootProject.projectDir}/output"))
    }

    publishing {
        publications {
            "$project.modid"(MavenPublication) {
                groupId = 'games.moegirl.sinocraft'
                artifactId = project.modid
                version = System.getenv('GITHUB_REF_NAME') == 'main'
                        ? "${project.minecraft_version}-${project.sinoseries_version}-SNAPSHOT"
                        : project.version
                from components.java

                pom.withXml {
                    if ("$project.modid" != "sinocore") {
                        asNode().remove(asNode().get('dependencies'))
                        def dependenciesNode = asNode().appendNode('dependencies')
                        if ("$project.modid" == "sinofoundation") {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', 'games.moegirl.sinocraft')
                            dependencyNode.appendNode('artifactId', 'sinocore')
                            dependencyNode.appendNode('version', project.version)
                        } else {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', 'games.moegirl.sinocraft')
                            dependencyNode.appendNode('artifactId', 'sinocore')
                            dependencyNode.appendNode('version', project.version)

                            def dependencyNode2 = dependenciesNode.appendNode('dependency')
                            dependencyNode2.appendNode('groupId', 'games.moegirl.sinocraft')
                            dependencyNode2.appendNode('artifactId', 'sinofoundation')
                            dependencyNode2.appendNode('version', project.version)
                        }
                    }

                }
            }
        }
    }
}

publishing {
    repositories {
        maven {
            name = 'YuLuoMaven'
            url = 'https://maven.yuluo.dev/repository/minecraft-repo/'

            credentials {
                username System.getenv('SINOSERIES_MAVEN_USER')
                password System.getenv('SINOSERIES_MAVEN_PASS')
            }
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.parchment_minecraft_version}:${project.parchment_version}@zip")
    }

    implementation project(path: ':SinoCore', configuration: 'namedElements')
    implementation project(path: ':SinoFoundation', configuration: 'namedElements')
    implementation project(path: ':SinoFeast', configuration: 'namedElements')
    implementation project(path: ':SinoDivination', configuration: 'namedElements')
    implementation project(path: ':SinoCalligraphy', configuration: 'namedElements')
    implementation project(path: ':SinoTest', configuration: 'namedElements')

    // Add compile only api to any subproject.
    // https://docs.modrinth.com/maven
//    modRuntimeOnly("curse.maven:jei-${project.jei_project_id}:${project.jei_file_id}")
    modRuntimeOnly("maven.modrinth:jei:${project.jei_version}")  // JEI
    modRuntimeOnly("maven.modrinth:the-one-probe:${project.top_version}")  // TOP
    modRuntimeOnly("maven.modrinth:architectury-api:${project.architectury_version}")  // Architectury
    modRuntimeOnly("maven.modrinth:scannable:${project.scannable_version}")  // Scannable
//    modRuntimeOnly("curse.maven:nbtedit-reborn-${project.nbtedit_project_id}:${project.nbtedit_file_id}")
//    modRuntimeOnly("com.ptsmods:devlogin:3.1.1")
}

evaluationDependsOn ':SinoCore'
evaluationDependsOn ':SinoFoundation'
evaluationDependsOn ':SinoFeast'
evaluationDependsOn ':SinoDivination'
evaluationDependsOn ':SinoCalligraphy'
evaluationDependsOn ':SinoTest'

loom {
    silentMojangMappingsLicense()

    forge {
//        useForgeLoggerConfig = true
        mixinConfig 'sinocore.mixins.json'
        mixinConfig 'sinodivination.mixins.json'

        accessTransformer new File(project(':SinoCore').projectDir, 'src/main/resources/META-INF/accesstransformer.cfg')
        accessTransformer new File(project(':SinoDivination').projectDir, 'src/main/resources/META-INF/accesstransformer.cfg')
    }

    mods {
        sinocore {
            sourceSet project(':SinoCore').sourceSets.main
        }

        sinofoundation {
            sourceSet project(':SinoFoundation').sourceSets.main
        }

        sinofeast {
            sourceSet project(':SinoFeast').sourceSets.main
        }

        sinodivination {
            sourceSet project(':SinoDivination').sourceSets.main
        }

        sinocalligraphy {
            sourceSet project(':SinoCalligraphy').sourceSets.main
        }

        sinotest {
            sourceSet project(':SinoTest').sourceSets.main
        }
    }

    runs {
        sinoCoreData {
            data()

            programArgs '--all', '--mod', "sinocore",
                    '--output', file('SinoCore/src/generated/resources').absolutePath,
                    '--existing', file('SinoCore/src/main/resources').absolutePath
        }

        sinoFoundationData {
            data()

            programArgs '--all', '--mod', "sinofoundation",
                    '--output', file('SinoFoundation/src/generated/resources').absolutePath,
                    '--existing', file('SinoFoundation/src/main/resources').absolutePath,
                    '--existing', file('SinoCore/src/generated/resources').absolutePath,
                    '--existing', file('SinoCore/src/main/resources').absolutePath
        }

        sinoFeastData {
            data()

            programArgs '--all', '--mod', "sinofeast",
                    '--output', file('SinoFeast/src/generated/resources').absolutePath,
                    '--existing', file('SinoFeast/src/main/resources').absolutePath,
                    '--existing', file('SinoCore/src/generated/resources').absolutePath,
                    '--existing', file('SinoCore/src/main/resources').absolutePath,
                    '--existing', file('SinoFoundation/src/generated/resources').absolutePath,
                    '--existing', file('SinoFoundation/src/main/resources').absolutePath
        }

        sinoDivinationData {
            data()

            programArgs '--all', '--mod', "sinodivination",
                    '--output', file('SinoDivination/src/generated/resources').absolutePath,
                    '--existing', file('SinoDivination/src/main/resources').absolutePath,
                    '--existing', file('SinoCore/src/generated/resources').absolutePath,
                    '--existing', file('SinoCore/src/main/resources').absolutePath,
                    '--existing', file('SinoFoundation/src/generated/resources').absolutePath,
                    '--existing', file('SinoFoundation/src/main/resources').absolutePath
        }

        sinoCalligraphyData {
            data()

            programArgs '--all', '--mod', "sinocalligraphy",
                    '--output', file('SinoCalligraphy/src/generated/resources').absolutePath,
                    '--existing', file('SinoCalligraphy/src/main/resources').absolutePath,
                    '--existing', file('SinoCore/src/generated/resources').absolutePath,
                    '--existing', file('SinoCore/src/main/resources').absolutePath,
                    '--existing', file('SinoFoundation/src/generated/resources').absolutePath,
                    '--existing', file('SinoFoundation/src/main/resources').absolutePath
        }

        sinoTestData {
            data()

            programArgs '--all', '--mod', "sinotest",
                    '--output', file('SinoTest/src/generated/resources').absolutePath,
                    '--existing', file('SinoTest/src/main/resources').absolutePath,
                    '--existing', file('SinoCore/src/generated/resources').absolutePath,
                    '--existing', file('SinoCore/src/main/resources').absolutePath,
                    '--existing', file('SinoFoundation/src/generated/resources').absolutePath,
                    '--existing', file('SinoFoundation/src/main/resources').absolutePath
        }
    }
}
